// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages-ethereum.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct EthereumGetPublicKey {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    show_display: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumGetPublicKey {
    fn default() -> &'a EthereumGetPublicKey {
        <EthereumGetPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl EthereumGetPublicKey {
    pub fn new() -> EthereumGetPublicKey {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for EthereumGetPublicKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumGetPublicKey {
        EthereumGetPublicKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &EthereumGetPublicKey| { &m.address_n },
                |m: &mut EthereumGetPublicKey| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_display",
                |m: &EthereumGetPublicKey| { &m.show_display },
                |m: &mut EthereumGetPublicKey| { &mut m.show_display },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumGetPublicKey>(
                "EthereumGetPublicKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumGetPublicKey {
        static instance: ::protobuf::rt::LazyV2<EthereumGetPublicKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumGetPublicKey::new)
    }
}

impl ::protobuf::Clear for EthereumGetPublicKey {
    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumGetPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumGetPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumPublicKey {
    // message fields
    pub node: ::protobuf::SingularPtrField<super::messages_common::HDNodeType>,
    xpub: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumPublicKey {
    fn default() -> &'a EthereumPublicKey {
        <EthereumPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl EthereumPublicKey {
    pub fn new() -> EthereumPublicKey {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.common.HDNodeType node = 1;


    pub fn get_node(&self) -> &super::messages_common::HDNodeType {
        self.node.as_ref().unwrap_or_else(|| <super::messages_common::HDNodeType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::messages_common::HDNodeType) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::messages_common::HDNodeType {
        if self.node.is_none() {
            self.node.set_default();
        }
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::messages_common::HDNodeType {
        self.node.take().unwrap_or_else(|| super::messages_common::HDNodeType::new())
    }

    // required string xpub = 2;


    pub fn get_xpub(&self) -> &str {
        match self.xpub.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_xpub(&mut self) {
        self.xpub.clear();
    }

    pub fn has_xpub(&self) -> bool {
        self.xpub.is_some()
    }

    // Param is passed by value, moved
    pub fn set_xpub(&mut self, v: ::std::string::String) {
        self.xpub = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_xpub(&mut self) -> &mut ::std::string::String {
        if self.xpub.is_none() {
            self.xpub.set_default();
        }
        self.xpub.as_mut().unwrap()
    }

    // Take field
    pub fn take_xpub(&mut self) -> ::std::string::String {
        self.xpub.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for EthereumPublicKey {
    fn is_initialized(&self) -> bool {
        if self.node.is_none() {
            return false;
        }
        if self.xpub.is_none() {
            return false;
        }
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.xpub)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.xpub.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.node.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.xpub.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumPublicKey {
        EthereumPublicKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::messages_common::HDNodeType>>(
                "node",
                |m: &EthereumPublicKey| { &m.node },
                |m: &mut EthereumPublicKey| { &mut m.node },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "xpub",
                |m: &EthereumPublicKey| { &m.xpub },
                |m: &mut EthereumPublicKey| { &mut m.xpub },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumPublicKey>(
                "EthereumPublicKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumPublicKey {
        static instance: ::protobuf::rt::LazyV2<EthereumPublicKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumPublicKey::new)
    }
}

impl ::protobuf::Clear for EthereumPublicKey {
    fn clear(&mut self) {
        self.node.clear();
        self.xpub.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumGetAddress {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    show_display: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumGetAddress {
    fn default() -> &'a EthereumGetAddress {
        <EthereumGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl EthereumGetAddress {
    pub fn new() -> EthereumGetAddress {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for EthereumGetAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumGetAddress {
        EthereumGetAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &EthereumGetAddress| { &m.address_n },
                |m: &mut EthereumGetAddress| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_display",
                |m: &EthereumGetAddress| { &m.show_display },
                |m: &mut EthereumGetAddress| { &mut m.show_display },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumGetAddress>(
                "EthereumGetAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumGetAddress {
        static instance: ::protobuf::rt::LazyV2<EthereumGetAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumGetAddress::new)
    }
}

impl ::protobuf::Clear for EthereumGetAddress {
    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumGetAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumAddress {
    // message fields
    _old_address: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumAddress {
    fn default() -> &'a EthereumAddress {
        <EthereumAddress as ::protobuf::Message>::default_instance()
    }
}

impl EthereumAddress {
    pub fn new() -> EthereumAddress {
        ::std::default::Default::default()
    }

    // optional bytes _old_address = 1;


    pub fn get__old_address(&self) -> &[u8] {
        match self._old_address.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear__old_address(&mut self) {
        self._old_address.clear();
    }

    pub fn has__old_address(&self) -> bool {
        self._old_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set__old_address(&mut self, v: ::std::vec::Vec<u8>) {
        self._old_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut__old_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self._old_address.is_none() {
            self._old_address.set_default();
        }
        self._old_address.as_mut().unwrap()
    }

    // Take field
    pub fn take__old_address(&mut self) -> ::std::vec::Vec<u8> {
        self._old_address.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string address = 2;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for EthereumAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self._old_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self._old_address.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self._old_address.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumAddress {
        EthereumAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "_old_address",
                |m: &EthereumAddress| { &m._old_address },
                |m: &mut EthereumAddress| { &mut m._old_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &EthereumAddress| { &m.address },
                |m: &mut EthereumAddress| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumAddress>(
                "EthereumAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumAddress {
        static instance: ::protobuf::rt::LazyV2<EthereumAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumAddress::new)
    }
}

impl ::protobuf::Clear for EthereumAddress {
    fn clear(&mut self) {
        self._old_address.clear();
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumSignTx {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    nonce: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    gas_price: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    gas_limit: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    to: ::protobuf::SingularField<::std::string::String>,
    value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    data_initial_chunk: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    data_length: ::std::option::Option<u32>,
    chain_id: ::std::option::Option<u64>,
    tx_type: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumSignTx {
    fn default() -> &'a EthereumSignTx {
        <EthereumSignTx as ::protobuf::Message>::default_instance()
    }
}

impl EthereumSignTx {
    pub fn new() -> EthereumSignTx {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bytes nonce = 2;


    pub fn get_nonce(&self) -> &[u8] {
        match self.nonce.as_ref() {
            Some(v) => &v,
            None => b"",
        }
    }
    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::vec::Vec<u8>) {
        self.nonce = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.nonce.is_none() {
            self.nonce.set_default();
        }
        self.nonce.as_mut().unwrap()
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::vec::Vec<u8> {
        self.nonce.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes gas_price = 3;


    pub fn get_gas_price(&self) -> &[u8] {
        match self.gas_price.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_gas_price(&mut self) {
        self.gas_price.clear();
    }

    pub fn has_gas_price(&self) -> bool {
        self.gas_price.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_price(&mut self, v: ::std::vec::Vec<u8>) {
        self.gas_price = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gas_price(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.gas_price.is_none() {
            self.gas_price.set_default();
        }
        self.gas_price.as_mut().unwrap()
    }

    // Take field
    pub fn take_gas_price(&mut self) -> ::std::vec::Vec<u8> {
        self.gas_price.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes gas_limit = 4;


    pub fn get_gas_limit(&self) -> &[u8] {
        match self.gas_limit.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_gas_limit(&mut self) {
        self.gas_limit.clear();
    }

    pub fn has_gas_limit(&self) -> bool {
        self.gas_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_limit(&mut self, v: ::std::vec::Vec<u8>) {
        self.gas_limit = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gas_limit(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.gas_limit.is_none() {
            self.gas_limit.set_default();
        }
        self.gas_limit.as_mut().unwrap()
    }

    // Take field
    pub fn take_gas_limit(&mut self) -> ::std::vec::Vec<u8> {
        self.gas_limit.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string to = 11;


    pub fn get_to(&self) -> &str {
        match self.to.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    pub fn has_to(&self) -> bool {
        self.to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: ::std::string::String) {
        self.to = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut ::std::string::String {
        if self.to.is_none() {
            self.to.set_default();
        }
        self.to.as_mut().unwrap()
    }

    // Take field
    pub fn take_to(&mut self) -> ::std::string::String {
        self.to.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes value = 6;


    pub fn get_value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => &v,
            None => b"",
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes data_initial_chunk = 7;


    pub fn get_data_initial_chunk(&self) -> &[u8] {
        match self.data_initial_chunk.as_ref() {
            Some(v) => &v,
            None => b"",
        }
    }
    pub fn clear_data_initial_chunk(&mut self) {
        self.data_initial_chunk.clear();
    }

    pub fn has_data_initial_chunk(&self) -> bool {
        self.data_initial_chunk.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_initial_chunk(&mut self, v: ::std::vec::Vec<u8>) {
        self.data_initial_chunk = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_initial_chunk(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data_initial_chunk.is_none() {
            self.data_initial_chunk.set_default();
        }
        self.data_initial_chunk.as_mut().unwrap()
    }

    // Take field
    pub fn take_data_initial_chunk(&mut self) -> ::std::vec::Vec<u8> {
        self.data_initial_chunk.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 data_length = 8;


    pub fn get_data_length(&self) -> u32 {
        self.data_length.unwrap_or(0u32)
    }
    pub fn clear_data_length(&mut self) {
        self.data_length = ::std::option::Option::None;
    }

    pub fn has_data_length(&self) -> bool {
        self.data_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_length(&mut self, v: u32) {
        self.data_length = ::std::option::Option::Some(v);
    }

    // required uint64 chain_id = 9;


    pub fn get_chain_id(&self) -> u64 {
        self.chain_id.unwrap_or(0)
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id = ::std::option::Option::None;
    }

    pub fn has_chain_id(&self) -> bool {
        self.chain_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: u64) {
        self.chain_id = ::std::option::Option::Some(v);
    }

    // optional uint32 tx_type = 10;


    pub fn get_tx_type(&self) -> u32 {
        self.tx_type.unwrap_or(0)
    }
    pub fn clear_tx_type(&mut self) {
        self.tx_type = ::std::option::Option::None;
    }

    pub fn has_tx_type(&self) -> bool {
        self.tx_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_type(&mut self, v: u32) {
        self.tx_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for EthereumSignTx {
    fn is_initialized(&self) -> bool {
        if self.gas_price.is_none() {
            return false;
        }
        if self.gas_limit.is_none() {
            return false;
        }
        if self.chain_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.nonce)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.gas_price)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.gas_limit)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.to)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.value)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data_initial_chunk)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.data_length = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.chain_id = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tx_type = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.nonce.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.gas_price.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.gas_limit.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(ref v) = self.to.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(ref v) = self.data_initial_chunk.as_ref() {
            my_size += ::protobuf::rt::bytes_size(7, &v);
        }
        if let Some(v) = self.data_length {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.chain_id {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.tx_type {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.nonce.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.gas_price.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.gas_limit.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(ref v) = self.to.as_ref() {
            os.write_string(11, &v)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_bytes(6, &v)?;
        }
        if let Some(ref v) = self.data_initial_chunk.as_ref() {
            os.write_bytes(7, &v)?;
        }
        if let Some(v) = self.data_length {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.chain_id {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.tx_type {
            os.write_uint32(10, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumSignTx {
        EthereumSignTx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &EthereumSignTx| { &m.address_n },
                |m: &mut EthereumSignTx| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "nonce",
                |m: &EthereumSignTx| { &m.nonce },
                |m: &mut EthereumSignTx| { &mut m.nonce },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "gas_price",
                |m: &EthereumSignTx| { &m.gas_price },
                |m: &mut EthereumSignTx| { &mut m.gas_price },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "gas_limit",
                |m: &EthereumSignTx| { &m.gas_limit },
                |m: &mut EthereumSignTx| { &mut m.gas_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "to",
                |m: &EthereumSignTx| { &m.to },
                |m: &mut EthereumSignTx| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &EthereumSignTx| { &m.value },
                |m: &mut EthereumSignTx| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data_initial_chunk",
                |m: &EthereumSignTx| { &m.data_initial_chunk },
                |m: &mut EthereumSignTx| { &mut m.data_initial_chunk },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "data_length",
                |m: &EthereumSignTx| { &m.data_length },
                |m: &mut EthereumSignTx| { &mut m.data_length },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "chain_id",
                |m: &EthereumSignTx| { &m.chain_id },
                |m: &mut EthereumSignTx| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "tx_type",
                |m: &EthereumSignTx| { &m.tx_type },
                |m: &mut EthereumSignTx| { &mut m.tx_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumSignTx>(
                "EthereumSignTx",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumSignTx {
        static instance: ::protobuf::rt::LazyV2<EthereumSignTx> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumSignTx::new)
    }
}

impl ::protobuf::Clear for EthereumSignTx {
    fn clear(&mut self) {
        self.address_n.clear();
        self.nonce.clear();
        self.gas_price.clear();
        self.gas_limit.clear();
        self.to.clear();
        self.value.clear();
        self.data_initial_chunk.clear();
        self.data_length = ::std::option::Option::None;
        self.chain_id = ::std::option::Option::None;
        self.tx_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumSignTx {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumSignTxEIP1559 {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    nonce: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    max_gas_fee: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    max_priority_fee: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    gas_limit: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    to: ::protobuf::SingularField<::std::string::String>,
    value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    data_initial_chunk: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    data_length: ::std::option::Option<u32>,
    chain_id: ::std::option::Option<u64>,
    pub access_list: ::protobuf::RepeatedField<EthereumSignTxEIP1559_EthereumAccessList>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumSignTxEIP1559 {
    fn default() -> &'a EthereumSignTxEIP1559 {
        <EthereumSignTxEIP1559 as ::protobuf::Message>::default_instance()
    }
}

impl EthereumSignTxEIP1559 {
    pub fn new() -> EthereumSignTxEIP1559 {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // required bytes nonce = 2;


    pub fn get_nonce(&self) -> &[u8] {
        match self.nonce.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::vec::Vec<u8>) {
        self.nonce = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.nonce.is_none() {
            self.nonce.set_default();
        }
        self.nonce.as_mut().unwrap()
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::vec::Vec<u8> {
        self.nonce.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes max_gas_fee = 3;


    pub fn get_max_gas_fee(&self) -> &[u8] {
        match self.max_gas_fee.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_max_gas_fee(&mut self) {
        self.max_gas_fee.clear();
    }

    pub fn has_max_gas_fee(&self) -> bool {
        self.max_gas_fee.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_gas_fee(&mut self, v: ::std::vec::Vec<u8>) {
        self.max_gas_fee = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_gas_fee(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.max_gas_fee.is_none() {
            self.max_gas_fee.set_default();
        }
        self.max_gas_fee.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_gas_fee(&mut self) -> ::std::vec::Vec<u8> {
        self.max_gas_fee.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes max_priority_fee = 4;


    pub fn get_max_priority_fee(&self) -> &[u8] {
        match self.max_priority_fee.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_max_priority_fee(&mut self) {
        self.max_priority_fee.clear();
    }

    pub fn has_max_priority_fee(&self) -> bool {
        self.max_priority_fee.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_priority_fee(&mut self, v: ::std::vec::Vec<u8>) {
        self.max_priority_fee = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_priority_fee(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.max_priority_fee.is_none() {
            self.max_priority_fee.set_default();
        }
        self.max_priority_fee.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_priority_fee(&mut self) -> ::std::vec::Vec<u8> {
        self.max_priority_fee.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes gas_limit = 5;


    pub fn get_gas_limit(&self) -> &[u8] {
        match self.gas_limit.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_gas_limit(&mut self) {
        self.gas_limit.clear();
    }

    pub fn has_gas_limit(&self) -> bool {
        self.gas_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_limit(&mut self, v: ::std::vec::Vec<u8>) {
        self.gas_limit = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gas_limit(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.gas_limit.is_none() {
            self.gas_limit.set_default();
        }
        self.gas_limit.as_mut().unwrap()
    }

    // Take field
    pub fn take_gas_limit(&mut self) -> ::std::vec::Vec<u8> {
        self.gas_limit.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string to = 6;


    pub fn get_to(&self) -> &str {
        match self.to.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    pub fn has_to(&self) -> bool {
        self.to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: ::std::string::String) {
        self.to = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut ::std::string::String {
        if self.to.is_none() {
            self.to.set_default();
        }
        self.to.as_mut().unwrap()
    }

    // Take field
    pub fn take_to(&mut self) -> ::std::string::String {
        self.to.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bytes value = 7;


    pub fn get_value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes data_initial_chunk = 8;


    pub fn get_data_initial_chunk(&self) -> &[u8] {
        match self.data_initial_chunk.as_ref() {
            Some(v) => &v,
            None => b"",
        }
    }
    pub fn clear_data_initial_chunk(&mut self) {
        self.data_initial_chunk.clear();
    }

    pub fn has_data_initial_chunk(&self) -> bool {
        self.data_initial_chunk.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_initial_chunk(&mut self, v: ::std::vec::Vec<u8>) {
        self.data_initial_chunk = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_initial_chunk(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data_initial_chunk.is_none() {
            self.data_initial_chunk.set_default();
        }
        self.data_initial_chunk.as_mut().unwrap()
    }

    // Take field
    pub fn take_data_initial_chunk(&mut self) -> ::std::vec::Vec<u8> {
        self.data_initial_chunk.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint32 data_length = 9;


    pub fn get_data_length(&self) -> u32 {
        self.data_length.unwrap_or(0)
    }
    pub fn clear_data_length(&mut self) {
        self.data_length = ::std::option::Option::None;
    }

    pub fn has_data_length(&self) -> bool {
        self.data_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_length(&mut self, v: u32) {
        self.data_length = ::std::option::Option::Some(v);
    }

    // required uint64 chain_id = 10;


    pub fn get_chain_id(&self) -> u64 {
        self.chain_id.unwrap_or(0)
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id = ::std::option::Option::None;
    }

    pub fn has_chain_id(&self) -> bool {
        self.chain_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: u64) {
        self.chain_id = ::std::option::Option::Some(v);
    }

    // repeated .hw.trezor.messages.ethereum.EthereumSignTxEIP1559.EthereumAccessList access_list = 11;


    pub fn get_access_list(&self) -> &[EthereumSignTxEIP1559_EthereumAccessList] {
        &self.access_list
    }
    pub fn clear_access_list(&mut self) {
        self.access_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_list(&mut self, v: ::protobuf::RepeatedField<EthereumSignTxEIP1559_EthereumAccessList>) {
        self.access_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_access_list(&mut self) -> &mut ::protobuf::RepeatedField<EthereumSignTxEIP1559_EthereumAccessList> {
        &mut self.access_list
    }

    // Take field
    pub fn take_access_list(&mut self) -> ::protobuf::RepeatedField<EthereumSignTxEIP1559_EthereumAccessList> {
        ::std::mem::replace(&mut self.access_list, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EthereumSignTxEIP1559 {
    fn is_initialized(&self) -> bool {
        if self.nonce.is_none() {
            return false;
        }
        if self.max_gas_fee.is_none() {
            return false;
        }
        if self.max_priority_fee.is_none() {
            return false;
        }
        if self.gas_limit.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        if self.data_length.is_none() {
            return false;
        }
        if self.chain_id.is_none() {
            return false;
        }
        for v in &self.access_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.nonce)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.max_gas_fee)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.max_priority_fee)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.gas_limit)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.to)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.value)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data_initial_chunk)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.data_length = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.chain_id = ::std::option::Option::Some(tmp);
                },
                11 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.access_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.nonce.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.max_gas_fee.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.max_priority_fee.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(ref v) = self.gas_limit.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        if let Some(ref v) = self.to.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(7, &v);
        }
        if let Some(ref v) = self.data_initial_chunk.as_ref() {
            my_size += ::protobuf::rt::bytes_size(8, &v);
        }
        if let Some(v) = self.data_length {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.chain_id {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.access_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.nonce.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.max_gas_fee.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.max_priority_fee.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(ref v) = self.gas_limit.as_ref() {
            os.write_bytes(5, &v)?;
        }
        if let Some(ref v) = self.to.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_bytes(7, &v)?;
        }
        if let Some(ref v) = self.data_initial_chunk.as_ref() {
            os.write_bytes(8, &v)?;
        }
        if let Some(v) = self.data_length {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.chain_id {
            os.write_uint64(10, v)?;
        }
        for v in &self.access_list {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumSignTxEIP1559 {
        EthereumSignTxEIP1559::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &EthereumSignTxEIP1559| { &m.address_n },
                |m: &mut EthereumSignTxEIP1559| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "nonce",
                |m: &EthereumSignTxEIP1559| { &m.nonce },
                |m: &mut EthereumSignTxEIP1559| { &mut m.nonce },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "max_gas_fee",
                |m: &EthereumSignTxEIP1559| { &m.max_gas_fee },
                |m: &mut EthereumSignTxEIP1559| { &mut m.max_gas_fee },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "max_priority_fee",
                |m: &EthereumSignTxEIP1559| { &m.max_priority_fee },
                |m: &mut EthereumSignTxEIP1559| { &mut m.max_priority_fee },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "gas_limit",
                |m: &EthereumSignTxEIP1559| { &m.gas_limit },
                |m: &mut EthereumSignTxEIP1559| { &mut m.gas_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "to",
                |m: &EthereumSignTxEIP1559| { &m.to },
                |m: &mut EthereumSignTxEIP1559| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &EthereumSignTxEIP1559| { &m.value },
                |m: &mut EthereumSignTxEIP1559| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data_initial_chunk",
                |m: &EthereumSignTxEIP1559| { &m.data_initial_chunk },
                |m: &mut EthereumSignTxEIP1559| { &mut m.data_initial_chunk },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "data_length",
                |m: &EthereumSignTxEIP1559| { &m.data_length },
                |m: &mut EthereumSignTxEIP1559| { &mut m.data_length },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "chain_id",
                |m: &EthereumSignTxEIP1559| { &m.chain_id },
                |m: &mut EthereumSignTxEIP1559| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EthereumSignTxEIP1559_EthereumAccessList>>(
                "access_list",
                |m: &EthereumSignTxEIP1559| { &m.access_list },
                |m: &mut EthereumSignTxEIP1559| { &mut m.access_list },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumSignTxEIP1559>(
                "EthereumSignTxEIP1559",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumSignTxEIP1559 {
        static instance: ::protobuf::rt::LazyV2<EthereumSignTxEIP1559> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumSignTxEIP1559::new)
    }
}

impl ::protobuf::Clear for EthereumSignTxEIP1559 {
    fn clear(&mut self) {
        self.address_n.clear();
        self.nonce.clear();
        self.max_gas_fee.clear();
        self.max_priority_fee.clear();
        self.gas_limit.clear();
        self.to.clear();
        self.value.clear();
        self.data_initial_chunk.clear();
        self.data_length = ::std::option::Option::None;
        self.chain_id = ::std::option::Option::None;
        self.access_list.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumSignTxEIP1559 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumSignTxEIP1559 {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumSignTxEIP1559_EthereumAccessList {
    // message fields
    address: ::protobuf::SingularField<::std::string::String>,
    pub storage_keys: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumSignTxEIP1559_EthereumAccessList {
    fn default() -> &'a EthereumSignTxEIP1559_EthereumAccessList {
        <EthereumSignTxEIP1559_EthereumAccessList as ::protobuf::Message>::default_instance()
    }
}

impl EthereumSignTxEIP1559_EthereumAccessList {
    pub fn new() -> EthereumSignTxEIP1559_EthereumAccessList {
        ::std::default::Default::default()
    }

    // required string address = 1;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated bytes storage_keys = 2;


    pub fn get_storage_keys(&self) -> &[::std::vec::Vec<u8>] {
        &self.storage_keys
    }
    pub fn clear_storage_keys(&mut self) {
        self.storage_keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_keys(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.storage_keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_storage_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.storage_keys
    }

    // Take field
    pub fn take_storage_keys(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.storage_keys, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EthereumSignTxEIP1559_EthereumAccessList {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.storage_keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.storage_keys {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.storage_keys {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumSignTxEIP1559_EthereumAccessList {
        EthereumSignTxEIP1559_EthereumAccessList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &EthereumSignTxEIP1559_EthereumAccessList| { &m.address },
                |m: &mut EthereumSignTxEIP1559_EthereumAccessList| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "storage_keys",
                |m: &EthereumSignTxEIP1559_EthereumAccessList| { &m.storage_keys },
                |m: &mut EthereumSignTxEIP1559_EthereumAccessList| { &mut m.storage_keys },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumSignTxEIP1559_EthereumAccessList>(
                "EthereumSignTxEIP1559.EthereumAccessList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumSignTxEIP1559_EthereumAccessList {
        static instance: ::protobuf::rt::LazyV2<EthereumSignTxEIP1559_EthereumAccessList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumSignTxEIP1559_EthereumAccessList::new)
    }
}

impl ::protobuf::Clear for EthereumSignTxEIP1559_EthereumAccessList {
    fn clear(&mut self) {
        self.address.clear();
        self.storage_keys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumSignTxEIP1559_EthereumAccessList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumSignTxEIP1559_EthereumAccessList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumTxRequest {
    // message fields
    data_length: ::std::option::Option<u32>,
    signature_v: ::std::option::Option<u32>,
    signature_r: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature_s: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumTxRequest {
    fn default() -> &'a EthereumTxRequest {
        <EthereumTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl EthereumTxRequest {
    pub fn new() -> EthereumTxRequest {
        ::std::default::Default::default()
    }

    // optional uint32 data_length = 1;


    pub fn get_data_length(&self) -> u32 {
        self.data_length.unwrap_or(0)
    }
    pub fn clear_data_length(&mut self) {
        self.data_length = ::std::option::Option::None;
    }

    pub fn has_data_length(&self) -> bool {
        self.data_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_length(&mut self, v: u32) {
        self.data_length = ::std::option::Option::Some(v);
    }

    // optional uint32 signature_v = 2;


    pub fn get_signature_v(&self) -> u32 {
        self.signature_v.unwrap_or(0)
    }
    pub fn clear_signature_v(&mut self) {
        self.signature_v = ::std::option::Option::None;
    }

    pub fn has_signature_v(&self) -> bool {
        self.signature_v.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_v(&mut self, v: u32) {
        self.signature_v = ::std::option::Option::Some(v);
    }

    // optional bytes signature_r = 3;


    pub fn get_signature_r(&self) -> &[u8] {
        match self.signature_r.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature_r(&mut self) {
        self.signature_r.clear();
    }

    pub fn has_signature_r(&self) -> bool {
        self.signature_r.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_r(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature_r = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature_r(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature_r.is_none() {
            self.signature_r.set_default();
        }
        self.signature_r.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature_r(&mut self) -> ::std::vec::Vec<u8> {
        self.signature_r.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature_s = 4;


    pub fn get_signature_s(&self) -> &[u8] {
        match self.signature_s.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature_s(&mut self) {
        self.signature_s.clear();
    }

    pub fn has_signature_s(&self) -> bool {
        self.signature_s.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_s(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature_s = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature_s(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature_s.is_none() {
            self.signature_s.set_default();
        }
        self.signature_s.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature_s(&mut self) -> ::std::vec::Vec<u8> {
        self.signature_s.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EthereumTxRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.data_length = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.signature_v = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature_r)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature_s)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.data_length {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.signature_v {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.signature_r.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.signature_s.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.data_length {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.signature_v {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.signature_r.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.signature_s.as_ref() {
            os.write_bytes(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumTxRequest {
        EthereumTxRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "data_length",
                |m: &EthereumTxRequest| { &m.data_length },
                |m: &mut EthereumTxRequest| { &mut m.data_length },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "signature_v",
                |m: &EthereumTxRequest| { &m.signature_v },
                |m: &mut EthereumTxRequest| { &mut m.signature_v },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature_r",
                |m: &EthereumTxRequest| { &m.signature_r },
                |m: &mut EthereumTxRequest| { &mut m.signature_r },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature_s",
                |m: &EthereumTxRequest| { &m.signature_s },
                |m: &mut EthereumTxRequest| { &mut m.signature_s },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumTxRequest>(
                "EthereumTxRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumTxRequest {
        static instance: ::protobuf::rt::LazyV2<EthereumTxRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumTxRequest::new)
    }
}

impl ::protobuf::Clear for EthereumTxRequest {
    fn clear(&mut self) {
        self.data_length = ::std::option::Option::None;
        self.signature_v = ::std::option::Option::None;
        self.signature_r.clear();
        self.signature_s.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumTxRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumTxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumTxAck {
    // message fields
    data_chunk: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumTxAck {
    fn default() -> &'a EthereumTxAck {
        <EthereumTxAck as ::protobuf::Message>::default_instance()
    }
}

impl EthereumTxAck {
    pub fn new() -> EthereumTxAck {
        ::std::default::Default::default()
    }

    // required bytes data_chunk = 1;


    pub fn get_data_chunk(&self) -> &[u8] {
        match self.data_chunk.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_data_chunk(&mut self) {
        self.data_chunk.clear();
    }

    pub fn has_data_chunk(&self) -> bool {
        self.data_chunk.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_chunk(&mut self, v: ::std::vec::Vec<u8>) {
        self.data_chunk = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_chunk(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data_chunk.is_none() {
            self.data_chunk.set_default();
        }
        self.data_chunk.as_mut().unwrap()
    }

    // Take field
    pub fn take_data_chunk(&mut self) -> ::std::vec::Vec<u8> {
        self.data_chunk.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EthereumTxAck {
    fn is_initialized(&self) -> bool {
        if self.data_chunk.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data_chunk)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.data_chunk.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.data_chunk.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumTxAck {
        EthereumTxAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data_chunk",
                |m: &EthereumTxAck| { &m.data_chunk },
                |m: &mut EthereumTxAck| { &mut m.data_chunk },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumTxAck>(
                "EthereumTxAck",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumTxAck {
        static instance: ::protobuf::rt::LazyV2<EthereumTxAck> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumTxAck::new)
    }
}

impl ::protobuf::Clear for EthereumTxAck {
    fn clear(&mut self) {
        self.data_chunk.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumTxAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumTxAck {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumSignMessage {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    message: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumSignMessage {
    fn default() -> &'a EthereumSignMessage {
        <EthereumSignMessage as ::protobuf::Message>::default_instance()
    }
}

impl EthereumSignMessage {
    pub fn new() -> EthereumSignMessage {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // required bytes message = 2;


    pub fn get_message(&self) -> &[u8] {
        match self.message.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        self.message.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EthereumSignMessage {
    fn is_initialized(&self) -> bool {
        if self.message.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.message.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.message.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumSignMessage {
        EthereumSignMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &EthereumSignMessage| { &m.address_n },
                |m: &mut EthereumSignMessage| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "message",
                |m: &EthereumSignMessage| { &m.message },
                |m: &mut EthereumSignMessage| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumSignMessage>(
                "EthereumSignMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumSignMessage {
        static instance: ::protobuf::rt::LazyV2<EthereumSignMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumSignMessage::new)
    }
}

impl ::protobuf::Clear for EthereumSignMessage {
    fn clear(&mut self) {
        self.address_n.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumSignMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumSignMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumMessageSignature {
    // message fields
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumMessageSignature {
    fn default() -> &'a EthereumMessageSignature {
        <EthereumMessageSignature as ::protobuf::Message>::default_instance()
    }
}

impl EthereumMessageSignature {
    pub fn new() -> EthereumMessageSignature {
        ::std::default::Default::default()
    }

    // required bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required string address = 3;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for EthereumMessageSignature {
    fn is_initialized(&self) -> bool {
        if self.signature.is_none() {
            return false;
        }
        if self.address.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumMessageSignature {
        EthereumMessageSignature::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &EthereumMessageSignature| { &m.signature },
                |m: &mut EthereumMessageSignature| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &EthereumMessageSignature| { &m.address },
                |m: &mut EthereumMessageSignature| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumMessageSignature>(
                "EthereumMessageSignature",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumMessageSignature {
        static instance: ::protobuf::rt::LazyV2<EthereumMessageSignature> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumMessageSignature::new)
    }
}

impl ::protobuf::Clear for EthereumMessageSignature {
    fn clear(&mut self) {
        self.signature.clear();
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumMessageSignature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumMessageSignature {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumVerifyMessage {
    // message fields
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    message: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumVerifyMessage {
    fn default() -> &'a EthereumVerifyMessage {
        <EthereumVerifyMessage as ::protobuf::Message>::default_instance()
    }
}

impl EthereumVerifyMessage {
    pub fn new() -> EthereumVerifyMessage {
        ::std::default::Default::default()
    }

    // required bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes message = 3;


    pub fn get_message(&self) -> &[u8] {
        match self.message.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        self.message.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required string address = 4;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for EthereumVerifyMessage {
    fn is_initialized(&self) -> bool {
        if self.signature.is_none() {
            return false;
        }
        if self.message.is_none() {
            return false;
        }
        if self.address.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.message)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.message.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.message.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumVerifyMessage {
        EthereumVerifyMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &EthereumVerifyMessage| { &m.signature },
                |m: &mut EthereumVerifyMessage| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "message",
                |m: &EthereumVerifyMessage| { &m.message },
                |m: &mut EthereumVerifyMessage| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &EthereumVerifyMessage| { &m.address },
                |m: &mut EthereumVerifyMessage| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumVerifyMessage>(
                "EthereumVerifyMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumVerifyMessage {
        static instance: ::protobuf::rt::LazyV2<EthereumVerifyMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumVerifyMessage::new)
    }
}

impl ::protobuf::Clear for EthereumVerifyMessage {
    fn clear(&mut self) {
        self.signature.clear();
        self.message.clear();
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumVerifyMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumVerifyMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17messages-ethereum.proto\x12\x1bhw.trezor.messages.ethereum\x1a\x15\
    messages-common.proto\"V\n\x14EthereumGetPublicKey\x12\x1b\n\taddress_n\
    \x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\x02\x20\x01(\
    \x08R\x0bshowDisplay\"b\n\x11EthereumPublicKey\x129\n\x04node\x18\x01\
    \x20\x02(\x0b2%.hw.trezor.messages.common.HDNodeTypeR\x04node\x12\x12\n\
    \x04xpub\x18\x02\x20\x02(\tR\x04xpub\"T\n\x12EthereumGetAddress\x12\x1b\
    \n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\
    \x02\x20\x01(\x08R\x0bshowDisplay\"Q\n\x0fEthereumAddress\x12$\n\x0c_old\
    _address\x18\x01\x20\x01(\x0cR\nOldAddressB\x02\x18\x01\x12\x18\n\x07add\
    ress\x18\x02\x20\x01(\tR\x07address\"\xb1\x02\n\x0eEthereumSignTx\x12\
    \x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12\x16\n\x05nonce\x18\
    \x02\x20\x01(\x0c:\0R\x05nonce\x12\x1b\n\tgas_price\x18\x03\x20\x02(\x0c\
    R\x08gasPrice\x12\x1b\n\tgas_limit\x18\x04\x20\x02(\x0cR\x08gasLimit\x12\
    \x10\n\x02to\x18\x0b\x20\x01(\t:\0R\x02to\x12\x16\n\x05value\x18\x06\x20\
    \x01(\x0c:\0R\x05value\x12.\n\x12data_initial_chunk\x18\x07\x20\x01(\x0c\
    :\0R\x10dataInitialChunk\x12\"\n\x0bdata_length\x18\x08\x20\x01(\r:\x010\
    R\ndataLength\x12\x19\n\x08chain_id\x18\t\x20\x02(\x04R\x07chainId\x12\
    \x17\n\x07tx_type\x18\n\x20\x01(\rR\x06txType\"\x80\x04\n\x15EthereumSig\
    nTxEIP1559\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12\x14\
    \n\x05nonce\x18\x02\x20\x02(\x0cR\x05nonce\x12\x1e\n\x0bmax_gas_fee\x18\
    \x03\x20\x02(\x0cR\tmaxGasFee\x12(\n\x10max_priority_fee\x18\x04\x20\x02\
    (\x0cR\x0emaxPriorityFee\x12\x1b\n\tgas_limit\x18\x05\x20\x02(\x0cR\x08g\
    asLimit\x12\x10\n\x02to\x18\x06\x20\x01(\t:\0R\x02to\x12\x14\n\x05value\
    \x18\x07\x20\x02(\x0cR\x05value\x12.\n\x12data_initial_chunk\x18\x08\x20\
    \x01(\x0c:\0R\x10dataInitialChunk\x12\x1f\n\x0bdata_length\x18\t\x20\x02\
    (\rR\ndataLength\x12\x19\n\x08chain_id\x18\n\x20\x02(\x04R\x07chainId\
    \x12f\n\x0baccess_list\x18\x0b\x20\x03(\x0b2E.hw.trezor.messages.ethereu\
    m.EthereumSignTxEIP1559.EthereumAccessListR\naccessList\x1aQ\n\x12Ethere\
    umAccessList\x12\x18\n\x07address\x18\x01\x20\x02(\tR\x07address\x12!\n\
    \x0cstorage_keys\x18\x02\x20\x03(\x0cR\x0bstorageKeys\"\x97\x01\n\x11Eth\
    ereumTxRequest\x12\x1f\n\x0bdata_length\x18\x01\x20\x01(\rR\ndataLength\
    \x12\x1f\n\x0bsignature_v\x18\x02\x20\x01(\rR\nsignatureV\x12\x1f\n\x0bs\
    ignature_r\x18\x03\x20\x01(\x0cR\nsignatureR\x12\x1f\n\x0bsignature_s\
    \x18\x04\x20\x01(\x0cR\nsignatureS\".\n\rEthereumTxAck\x12\x1d\n\ndata_c\
    hunk\x18\x01\x20\x02(\x0cR\tdataChunk\"L\n\x13EthereumSignMessage\x12\
    \x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12\x18\n\x07message\
    \x18\x02\x20\x02(\x0cR\x07message\"R\n\x18EthereumMessageSignature\x12\
    \x1c\n\tsignature\x18\x02\x20\x02(\x0cR\tsignature\x12\x18\n\x07address\
    \x18\x03\x20\x02(\tR\x07address\"i\n\x15EthereumVerifyMessage\x12\x1c\n\
    \tsignature\x18\x02\x20\x02(\x0cR\tsignature\x12\x18\n\x07message\x18\
    \x03\x20\x02(\x0cR\x07message\x12\x18\n\x07address\x18\x04\x20\x02(\tR\
    \x07addressB<\n#com.satoshilabs.trezor.lib.protobufB\x15TrezorMessageEth\
    ereumJ\xa34\n\x07\x12\x05\0\0\x96\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\0$\n\x08\n\x01\x08\x12\x03\x04\0<\n.\n\
    \x02\x08\x01\x12\x03\x04\0<\x1a#\x20Sugar\x20for\x20easier\x20handling\
    \x20in\x20Java\n\n\x08\n\x01\x08\x12\x03\x05\06\n\t\n\x02\x08\x08\x12\
    \x03\x05\06\n\t\n\x02\x03\0\x12\x03\x07\0\x1f\n\x82\x01\n\x02\x04\0\x12\
    \x04\x10\0\x13\x01\x1av*\n\x20Request:\x20Ask\x20device\x20for\x20public\
    \x20key\x20corresponding\x20to\x20address_n\x20path\n\x20@start\n\x20@ne\
    xt\x20EthereumPublicKey\n\x20@next\x20Failure\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x10\x08\x1c\n=\n\x04\x04\0\x02\0\x12\x03\x11\x04\"\"0\x20BIP-32\x20\
    path\x20to\x20derive\x20the\x20key\x20from\x20master\x20node\n\n\x0c\n\
    \x05\x04\0\x02\0\x04\x12\x03\x11\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03\x11\r\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x11\x14\x1d\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x11\x20!\nC\n\x04\x04\0\x02\x01\x12\x03\x12\
    \x04#\"6\x20optionally\x20show\x20on\x20display\x20before\x20sending\x20\
    the\x20result\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x12\x04\x0c\n\x0c\
    \n\x05\x04\0\x02\x01\x05\x12\x03\x12\r\x11\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x12\x12\x1e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x12!\"\nT\n\
    \x02\x04\x01\x12\x04\x19\0\x1c\x01\x1aH*\n\x20Response:\x20Contains\x20p\
    ublic\x20key\x20derived\x20from\x20device\x20private\x20seed\n\x20@end\n\
    \n\n\n\x03\x04\x01\x01\x12\x03\x19\x08\x19\n\x20\n\x04\x04\x01\x02\0\x12\
    \x03\x1a\x04;\"\x13\x20BIP32\x20public\x20node\n\n\x0c\n\x05\x04\x01\x02\
    \0\x04\x12\x03\x1a\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x1a\r1\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1a26\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x1a9:\n-\n\x04\x04\x01\x02\x01\x12\x03\x1b\x04\x1d\"\x20\
    \x20serialized\x20form\x20of\x20public\x20node\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x04\x12\x03\x1b\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x1b\
    \r\x13\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1b\x14\x18\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x1b\x1b\x1c\n\x86\x01\n\x02\x04\x02\x12\x04\
    $\0'\x01\x1az*\n\x20Request:\x20Ask\x20device\x20for\x20Ethereum\x20addr\
    ess\x20corresponding\x20to\x20address_n\x20path\n\x20@start\n\x20@next\
    \x20EthereumAddress\n\x20@next\x20Failure\n\n\n\n\x03\x04\x02\x01\x12\
    \x03$\x08\x1a\n=\n\x04\x04\x02\x02\0\x12\x03%\x04\"\"0\x20BIP-32\x20path\
    \x20to\x20derive\x20the\x20key\x20from\x20master\x20node\n\n\x0c\n\x05\
    \x04\x02\x02\0\x04\x12\x03%\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x03%\r\x13\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03%\x14\x1d\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03%\x20!\nC\n\x04\x04\x02\x02\x01\x12\x03&\x04#\
    \"6\x20optionally\x20show\x20on\x20display\x20before\x20sending\x20the\
    \x20result\n\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03&\x04\x0c\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03&\r\x11\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03&\x12\x1e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03&!\"\n]\n\x02\
    \x04\x03\x12\x04-\00\x01\x1aQ*\n\x20Response:\x20Contains\x20an\x20Ether\
    eum\x20address\x20derived\x20from\x20device\x20private\x20seed\n\x20@end\
    \n\n\n\n\x03\x04\x03\x01\x12\x03-\x08\x17\nD\n\x04\x04\x03\x02\0\x12\x03\
    .\x046\"7\x20trezor\x20<1.8.0,\x20<2.1.0\x20-\x20raw\x20bytes\x20of\x20E\
    thereum\x20address\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03.\x04\x0c\n\
    \x0c\n\x05\x04\x03\x02\0\x05\x12\x03.\r\x12\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03.\x13\x1f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03.\"#\n\x0c\n\
    \x05\x04\x03\x02\0\x08\x12\x03.$5\n\r\n\x06\x04\x03\x02\0\x08\x03\x12\
    \x03.%4\n5\n\x04\x04\x03\x02\x01\x12\x03/\x04\x20\"(\x20Ethereum\x20addr\
    ess\x20as\x20hex-encoded\x20string\n\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\
    \x03/\x04\x0c\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03/\r\x13\n\x0c\n\x05\
    \x04\x03\x02\x01\x01\x12\x03/\x14\x1b\n\x0c\n\x05\x04\x03\x02\x01\x03\
    \x12\x03/\x1e\x1f\n\xc7\x02\n\x02\x04\x04\x12\x04;\0F\x01\x1a\xba\x02*\n\
    \x20Request:\x20Ask\x20device\x20to\x20sign\x20transaction\n\x20gas_pric\
    e,\x20gas_limit\x20and\x20chain_id\x20must\x20be\x20provided\x20and\x20n\
    on-zero.\n\x20All\x20other\x20fields\x20are\x20optional\x20and\x20defaul\
    t\x20to\x20value\x20`0`\x20if\x20missing.\n\x20Note:\x20the\x20first\x20\
    at\x20most\x201024\x20bytes\x20of\x20data\x20MUST\x20be\x20transmitted\
    \x20as\x20part\x20of\x20this\x20message.\n\x20@start\n\x20@next\x20Ether\
    eumTxRequest\n\x20@next\x20Failure\n\n\n\n\x03\x04\x04\x01\x12\x03;\x08\
    \x16\n=\n\x04\x04\x04\x02\0\x12\x03<\x04\"\"0\x20BIP-32\x20path\x20to\
    \x20derive\x20the\x20key\x20from\x20master\x20node\n\n\x0c\n\x05\x04\x04\
    \x02\0\x04\x12\x03<\x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03<\r\x13\
    \n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03<\x14\x1d\n\x0c\n\x05\x04\x04\x02\
    \0\x03\x12\x03<\x20!\n,\n\x04\x04\x04\x02\x01\x12\x03=\x04*\"\x1f\x20<=2\
    56\x20bit\x20unsigned\x20big\x20endian\n\n\x0c\n\x05\x04\x04\x02\x01\x04\
    \x12\x03=\x04\x0c\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03=\r\x12\n\x0c\n\
    \x05\x04\x04\x02\x01\x01\x12\x03=\x13\x18\n\x0c\n\x05\x04\x04\x02\x01\
    \x03\x12\x03=\x1b\x1c\n\x0c\n\x05\x04\x04\x02\x01\x08\x12\x03=\x1d)\n\
    \x0c\n\x05\x04\x04\x02\x01\x07\x12\x03=&(\n5\n\x04\x04\x04\x02\x02\x12\
    \x03>\x04!\"(\x20<=256\x20bit\x20unsigned\x20big\x20endian\x20(in\x20wei\
    )\n\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x03>\x04\x0c\n\x0c\n\x05\x04\x04\
    \x02\x02\x05\x12\x03>\r\x12\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03>\x13\
    \x1c\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03>\x1f\x20\n,\n\x04\x04\x04\
    \x02\x03\x12\x03?\x04!\"\x1f\x20<=256\x20bit\x20unsigned\x20big\x20endia\
    n\n\n\x0c\n\x05\x04\x04\x02\x03\x04\x12\x03?\x04\x0c\n\x0c\n\x05\x04\x04\
    \x02\x03\x05\x12\x03?\r\x12\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03?\x13\
    \x1c\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03?\x1f\x20\n\x20\n\x04\x04\
    \x04\x02\x04\x12\x03@\x04)\"\x13\x20recipient\x20address\n\n\x0c\n\x05\
    \x04\x04\x02\x04\x04\x12\x03@\x04\x0c\n\x0c\n\x05\x04\x04\x02\x04\x05\
    \x12\x03@\r\x13\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03@\x14\x16\n\x0c\n\
    \x05\x04\x04\x02\x04\x03\x12\x03@\x19\x1b\n\x0c\n\x05\x04\x04\x02\x04\
    \x08\x12\x03@\x1c(\n\x0c\n\x05\x04\x04\x02\x04\x07\x12\x03@%'\n5\n\x04\
    \x04\x04\x02\x05\x12\x03A\x04*\"(\x20<=256\x20bit\x20unsigned\x20big\x20\
    endian\x20(in\x20wei)\n\n\x0c\n\x05\x04\x04\x02\x05\x04\x12\x03A\x04\x0c\
    \n\x0c\n\x05\x04\x04\x02\x05\x05\x12\x03A\r\x12\n\x0c\n\x05\x04\x04\x02\
    \x05\x01\x12\x03A\x13\x18\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03A\x1b\
    \x1c\n\x0c\n\x05\x04\x04\x02\x05\x08\x12\x03A\x1d)\n\x0c\n\x05\x04\x04\
    \x02\x05\x07\x12\x03A&(\n5\n\x04\x04\x04\x02\x06\x12\x03B\x047\"(\x20The\
    \x20initial\x20data\x20chunk\x20(<=\x201024\x20bytes)\n\n\x0c\n\x05\x04\
    \x04\x02\x06\x04\x12\x03B\x04\x0c\n\x0c\n\x05\x04\x04\x02\x06\x05\x12\
    \x03B\r\x12\n\x0c\n\x05\x04\x04\x02\x06\x01\x12\x03B\x13%\n\x0c\n\x05\
    \x04\x04\x02\x06\x03\x12\x03B()\n\x0c\n\x05\x04\x04\x02\x06\x08\x12\x03B\
    *6\n\x0c\n\x05\x04\x04\x02\x06\x07\x12\x03B35\n,\n\x04\x04\x04\x02\x07\
    \x12\x03C\x040\"\x1f\x20Length\x20of\x20transaction\x20payload\n\n\x0c\n\
    \x05\x04\x04\x02\x07\x04\x12\x03C\x04\x0c\n\x0c\n\x05\x04\x04\x02\x07\
    \x05\x12\x03C\r\x13\n\x0c\n\x05\x04\x04\x02\x07\x01\x12\x03C\x14\x1f\n\
    \x0c\n\x05\x04\x04\x02\x07\x03\x12\x03C\"#\n\x0c\n\x05\x04\x04\x02\x07\
    \x08\x12\x03C$/\n\x0c\n\x05\x04\x04\x02\x07\x07\x12\x03C-.\n#\n\x04\x04\
    \x04\x02\x08\x12\x03D\x04!\"\x16\x20Chain\x20Id\x20for\x20EIP\x20155\n\n\
    \x0c\n\x05\x04\x04\x02\x08\x04\x12\x03D\x04\x0c\n\x0c\n\x05\x04\x04\x02\
    \x08\x05\x12\x03D\r\x13\n\x0c\n\x05\x04\x04\x02\x08\x01\x12\x03D\x14\x1c\
    \n\x0c\n\x05\x04\x04\x02\x08\x03\x12\x03D\x1f\x20\n\x20\n\x04\x04\x04\
    \x02\t\x12\x03E\x04!\"\x13\x20Used\x20for\x20Wanchain\n\n\x0c\n\x05\x04\
    \x04\x02\t\x04\x12\x03E\x04\x0c\n\x0c\n\x05\x04\x04\x02\t\x05\x12\x03E\r\
    \x13\n\x0c\n\x05\x04\x04\x02\t\x01\x12\x03E\x14\x1b\n\x0c\n\x05\x04\x04\
    \x02\t\x03\x12\x03E\x1e\x20\n\xc9\x01\n\x02\x04\x05\x12\x04O\0`\x01\x1a\
    \xbc\x01*\n\x20Request:\x20Ask\x20device\x20to\x20sign\x20EIP1559\x20tra\
    nsaction\n\x20Note:\x20the\x20first\x20at\x20most\x201024\x20bytes\x20of\
    \x20data\x20MUST\x20be\x20transmitted\x20as\x20part\x20of\x20this\x20mes\
    sage.\n\x20@start\n\x20@next\x20EthereumTxRequest\n\x20@next\x20Failure\
    \n\n\n\n\x03\x04\x05\x01\x12\x03O\x08\x1d\n=\n\x04\x04\x05\x02\0\x12\x03\
    P\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\x20from\x20ma\
    ster\x20node\n\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03P\x04\x0c\n\x0c\n\
    \x05\x04\x05\x02\0\x05\x12\x03P\r\x13\n\x0c\n\x05\x04\x05\x02\0\x01\x12\
    \x03P\x14\x1d\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03P\x20!\n,\n\x04\x04\
    \x05\x02\x01\x12\x03Q\x04\x1d\"\x1f\x20<=256\x20bit\x20unsigned\x20big\
    \x20endian\n\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03Q\x04\x0c\n\x0c\n\
    \x05\x04\x05\x02\x01\x05\x12\x03Q\r\x12\n\x0c\n\x05\x04\x05\x02\x01\x01\
    \x12\x03Q\x13\x18\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03Q\x1b\x1c\n5\n\
    \x04\x04\x05\x02\x02\x12\x03R\x04#\"(\x20<=256\x20bit\x20unsigned\x20big\
    \x20endian\x20(in\x20wei)\n\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\x03R\x04\
    \x0c\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x03R\r\x12\n\x0c\n\x05\x04\x05\
    \x02\x02\x01\x12\x03R\x13\x1e\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03R!\
    \"\n5\n\x04\x04\x05\x02\x03\x12\x03S\x04(\"(\x20<=256\x20bit\x20unsigned\
    \x20big\x20endian\x20(in\x20wei)\n\n\x0c\n\x05\x04\x05\x02\x03\x04\x12\
    \x03S\x04\x0c\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\x03S\r\x12\n\x0c\n\x05\
    \x04\x05\x02\x03\x01\x12\x03S\x13#\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\
    \x03S&'\n,\n\x04\x04\x05\x02\x04\x12\x03T\x04!\"\x1f\x20<=256\x20bit\x20\
    unsigned\x20big\x20endian\n\n\x0c\n\x05\x04\x05\x02\x04\x04\x12\x03T\x04\
    \x0c\n\x0c\n\x05\x04\x05\x02\x04\x05\x12\x03T\r\x12\n\x0c\n\x05\x04\x05\
    \x02\x04\x01\x12\x03T\x13\x1c\n\x0c\n\x05\x04\x05\x02\x04\x03\x12\x03T\
    \x1f\x20\n\x20\n\x04\x04\x05\x02\x05\x12\x03U\x04(\"\x13\x20recipient\
    \x20address\n\n\x0c\n\x05\x04\x05\x02\x05\x04\x12\x03U\x04\x0c\n\x0c\n\
    \x05\x04\x05\x02\x05\x05\x12\x03U\r\x13\n\x0c\n\x05\x04\x05\x02\x05\x01\
    \x12\x03U\x14\x16\n\x0c\n\x05\x04\x05\x02\x05\x03\x12\x03U\x19\x1a\n\x0c\
    \n\x05\x04\x05\x02\x05\x08\x12\x03U\x1b'\n\x0c\n\x05\x04\x05\x02\x05\x07\
    \x12\x03U$&\n5\n\x04\x04\x05\x02\x06\x12\x03V\x04\x1d\"(\x20<=256\x20bit\
    \x20unsigned\x20big\x20endian\x20(in\x20wei)\n\n\x0c\n\x05\x04\x05\x02\
    \x06\x04\x12\x03V\x04\x0c\n\x0c\n\x05\x04\x05\x02\x06\x05\x12\x03V\r\x12\
    \n\x0c\n\x05\x04\x05\x02\x06\x01\x12\x03V\x13\x18\n\x0c\n\x05\x04\x05\
    \x02\x06\x03\x12\x03V\x1b\x1c\n5\n\x04\x04\x05\x02\x07\x12\x03W\x047\"(\
    \x20The\x20initial\x20data\x20chunk\x20(<=\x201024\x20bytes)\n\n\x0c\n\
    \x05\x04\x05\x02\x07\x04\x12\x03W\x04\x0c\n\x0c\n\x05\x04\x05\x02\x07\
    \x05\x12\x03W\r\x12\n\x0c\n\x05\x04\x05\x02\x07\x01\x12\x03W\x13%\n\x0c\
    \n\x05\x04\x05\x02\x07\x03\x12\x03W()\n\x0c\n\x05\x04\x05\x02\x07\x08\
    \x12\x03W*6\n\x0c\n\x05\x04\x05\x02\x07\x07\x12\x03W35\n,\n\x04\x04\x05\
    \x02\x08\x12\x03X\x04$\"\x1f\x20Length\x20of\x20transaction\x20payload\n\
    \n\x0c\n\x05\x04\x05\x02\x08\x04\x12\x03X\x04\x0c\n\x0c\n\x05\x04\x05\
    \x02\x08\x05\x12\x03X\r\x13\n\x0c\n\x05\x04\x05\x02\x08\x01\x12\x03X\x14\
    \x1f\n\x0c\n\x05\x04\x05\x02\x08\x03\x12\x03X\"#\n#\n\x04\x04\x05\x02\t\
    \x12\x03Y\x04\"\"\x16\x20Chain\x20Id\x20for\x20EIP\x20155\n\n\x0c\n\x05\
    \x04\x05\x02\t\x04\x12\x03Y\x04\x0c\n\x0c\n\x05\x04\x05\x02\t\x05\x12\
    \x03Y\r\x13\n\x0c\n\x05\x04\x05\x02\t\x01\x12\x03Y\x14\x1c\n\x0c\n\x05\
    \x04\x05\x02\t\x03\x12\x03Y\x1f!\n\x1a\n\x04\x04\x05\x02\n\x12\x03Z\x041\
    \"\r\x20Access\x20List\n\n\x0c\n\x05\x04\x05\x02\n\x04\x12\x03Z\x04\x0c\
    \n\x0c\n\x05\x04\x05\x02\n\x06\x12\x03Z\r\x1f\n\x0c\n\x05\x04\x05\x02\n\
    \x01\x12\x03Z\x20+\n\x0c\n\x05\x04\x05\x02\n\x03\x12\x03Z.0\n\x0c\n\x04\
    \x04\x05\x03\0\x12\x04\\\x04_\x05\n\x0c\n\x05\x04\x05\x03\0\x01\x12\x03\
    \\\x0c\x1e\n\r\n\x06\x04\x05\x03\0\x02\0\x12\x03]\x08$\n\x0e\n\x07\x04\
    \x05\x03\0\x02\0\x04\x12\x03]\x08\x10\n\x0e\n\x07\x04\x05\x03\0\x02\0\
    \x05\x12\x03]\x11\x17\n\x0e\n\x07\x04\x05\x03\0\x02\0\x01\x12\x03]\x18\
    \x1f\n\x0e\n\x07\x04\x05\x03\0\x02\0\x03\x12\x03]\"#\n\r\n\x06\x04\x05\
    \x03\0\x02\x01\x12\x03^\x08(\n\x0e\n\x07\x04\x05\x03\0\x02\x01\x04\x12\
    \x03^\x08\x10\n\x0e\n\x07\x04\x05\x03\0\x02\x01\x05\x12\x03^\x11\x16\n\
    \x0e\n\x07\x04\x05\x03\0\x02\x01\x01\x12\x03^\x17#\n\x0e\n\x07\x04\x05\
    \x03\0\x02\x01\x03\x12\x03^&'\n\xbb\x02\n\x02\x04\x06\x12\x04i\0n\x01\
    \x1a\xae\x02*\n\x20Response:\x20Device\x20asks\x20for\x20more\x20data\
    \x20from\x20transaction\x20payload,\x20or\x20returns\x20the\x20signature\
    .\n\x20If\x20data_length\x20is\x20set,\x20device\x20awaits\x20that\x20ma\
    ny\x20more\x20bytes\x20of\x20payload.\n\x20Otherwise,\x20the\x20signatur\
    e_*\x20fields\x20contain\x20the\x20computed\x20transaction\x20signature.\
    \x20All\x20three\x20fields\x20will\x20be\x20present.\n\x20@end\n\x20@nex\
    t\x20EthereumTxAck\n\n\n\n\x03\x04\x06\x01\x12\x03i\x08\x19\n8\n\x04\x04\
    \x06\x02\0\x12\x03j\x04$\"+\x20Number\x20of\x20bytes\x20being\x20request\
    ed\x20(<=\x201024)\n\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03j\x04\x0c\n\
    \x0c\n\x05\x04\x06\x02\0\x05\x12\x03j\r\x13\n\x0c\n\x05\x04\x06\x02\0\
    \x01\x12\x03j\x14\x1f\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03j\"#\nK\n\x04\
    \x04\x06\x02\x01\x12\x03k\x04$\">\x20Computed\x20signature\x20(recovery\
    \x20parameter,\x20limited\x20to\x2027\x20or\x2028)\n\n\x0c\n\x05\x04\x06\
    \x02\x01\x04\x12\x03k\x04\x0c\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03k\r\
    \x13\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03k\x14\x1f\n\x0c\n\x05\x04\
    \x06\x02\x01\x03\x12\x03k\"#\n7\n\x04\x04\x06\x02\x02\x12\x03l\x04#\"*\
    \x20Computed\x20signature\x20R\x20component\x20(256\x20bit)\n\n\x0c\n\
    \x05\x04\x06\x02\x02\x04\x12\x03l\x04\x0c\n\x0c\n\x05\x04\x06\x02\x02\
    \x05\x12\x03l\r\x12\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03l\x13\x1e\n\
    \x0c\n\x05\x04\x06\x02\x02\x03\x12\x03l!\"\n7\n\x04\x04\x06\x02\x03\x12\
    \x03m\x04#\"*\x20Computed\x20signature\x20S\x20component\x20(256\x20bit)\
    \n\n\x0c\n\x05\x04\x06\x02\x03\x04\x12\x03m\x04\x0c\n\x0c\n\x05\x04\x06\
    \x02\x03\x05\x12\x03m\r\x12\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x03m\x13\
    \x1e\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03m!\"\nK\n\x02\x04\x07\x12\
    \x04t\0v\x01\x1a?*\n\x20Request:\x20Transaction\x20payload\x20data.\n\
    \x20@next\x20EthereumTxRequest\n\n\n\n\x03\x04\x07\x01\x12\x03t\x08\x15\
    \n=\n\x04\x04\x07\x02\0\x12\x03u\x04\"\"0\x20Bytes\x20from\x20transactio\
    n\x20payload\x20(<=\x201024\x20bytes)\n\n\x0c\n\x05\x04\x07\x02\0\x04\
    \x12\x03u\x04\x0c\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03u\r\x12\n\x0c\n\
    \x05\x04\x07\x02\0\x01\x12\x03u\x13\x1d\n\x0c\n\x05\x04\x07\x02\0\x03\
    \x12\x03u\x20!\nk\n\x02\x04\x08\x12\x05~\0\x81\x01\x01\x1a^*\n\x20Reques\
    t:\x20Ask\x20device\x20to\x20sign\x20message\n\x20@start\n\x20@next\x20E\
    thereumMessageSignature\n\x20@next\x20Failure\n\n\n\n\x03\x04\x08\x01\
    \x12\x03~\x08\x1b\n=\n\x04\x04\x08\x02\0\x12\x03\x7f\x04\"\"0\x20BIP-32\
    \x20path\x20to\x20derive\x20the\x20key\x20from\x20master\x20node\n\n\x0c\
    \n\x05\x04\x08\x02\0\x04\x12\x03\x7f\x04\x0c\n\x0c\n\x05\x04\x08\x02\0\
    \x05\x12\x03\x7f\r\x13\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03\x7f\x14\x1d\
    \n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03\x7f\x20!\n$\n\x04\x04\x08\x02\x01\
    \x12\x04\x80\x01\x04\x1f\"\x16\x20message\x20to\x20be\x20signed\n\n\r\n\
    \x05\x04\x08\x02\x01\x04\x12\x04\x80\x01\x04\x0c\n\r\n\x05\x04\x08\x02\
    \x01\x05\x12\x04\x80\x01\r\x12\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\x80\
    \x01\x13\x1a\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\x80\x01\x1d\x1e\n0\n\
    \x02\x04\t\x12\x06\x87\x01\0\x8a\x01\x01\x1a\"*\n\x20Response:\x20Signed\
    \x20message\n\x20@end\n\n\x0b\n\x03\x04\t\x01\x12\x04\x87\x01\x08\x20\n(\
    \n\x04\x04\t\x02\0\x12\x04\x88\x01\x04!\"\x1a\x20signature\x20of\x20the\
    \x20message\n\n\r\n\x05\x04\t\x02\0\x04\x12\x04\x88\x01\x04\x0c\n\r\n\
    \x05\x04\t\x02\0\x05\x12\x04\x88\x01\r\x12\n\r\n\x05\x04\t\x02\0\x01\x12\
    \x04\x88\x01\x13\x1c\n\r\n\x05\x04\t\x02\0\x03\x12\x04\x88\x01\x1f\x20\n\
    0\n\x04\x04\t\x02\x01\x12\x04\x89\x01\x04\x20\"\"\x20address\x20used\x20\
    to\x20sign\x20the\x20message\n\n\r\n\x05\x04\t\x02\x01\x04\x12\x04\x89\
    \x01\x04\x0c\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\x89\x01\r\x13\n\r\n\x05\
    \x04\t\x02\x01\x01\x12\x04\x89\x01\x14\x1b\n\r\n\x05\x04\t\x02\x01\x03\
    \x12\x04\x89\x01\x1e\x1f\n]\n\x02\x04\n\x12\x06\x92\x01\0\x96\x01\x01\
    \x1aO*\n\x20Request:\x20Ask\x20device\x20to\x20verify\x20message\n\x20@s\
    tart\n\x20@next\x20Success\n\x20@next\x20Failure\n\n\x0b\n\x03\x04\n\x01\
    \x12\x04\x92\x01\x08\x1d\n#\n\x04\x04\n\x02\0\x12\x04\x93\x01\x04!\"\x15\
    \x20signature\x20to\x20verify\n\n\r\n\x05\x04\n\x02\0\x04\x12\x04\x93\
    \x01\x04\x0c\n\r\n\x05\x04\n\x02\0\x05\x12\x04\x93\x01\r\x12\n\r\n\x05\
    \x04\n\x02\0\x01\x12\x04\x93\x01\x13\x1c\n\r\n\x05\x04\n\x02\0\x03\x12\
    \x04\x93\x01\x1f\x20\n!\n\x04\x04\n\x02\x01\x12\x04\x94\x01\x04\x1f\"\
    \x13\x20message\x20to\x20verify\n\n\r\n\x05\x04\n\x02\x01\x04\x12\x04\
    \x94\x01\x04\x0c\n\r\n\x05\x04\n\x02\x01\x05\x12\x04\x94\x01\r\x12\n\r\n\
    \x05\x04\n\x02\x01\x01\x12\x04\x94\x01\x13\x1a\n\r\n\x05\x04\n\x02\x01\
    \x03\x12\x04\x94\x01\x1d\x1e\n!\n\x04\x04\n\x02\x02\x12\x04\x95\x01\x04\
    \x20\"\x13\x20address\x20to\x20verify\n\n\r\n\x05\x04\n\x02\x02\x04\x12\
    \x04\x95\x01\x04\x0c\n\r\n\x05\x04\n\x02\x02\x05\x12\x04\x95\x01\r\x13\n\
    \r\n\x05\x04\n\x02\x02\x01\x12\x04\x95\x01\x14\x1b\n\r\n\x05\x04\n\x02\
    \x02\x03\x12\x04\x95\x01\x1e\x1f\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
