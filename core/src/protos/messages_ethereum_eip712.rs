// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages-ethereum-eip712.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct EthereumSignTypedData {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    primary_type: ::protobuf::SingularField<::std::string::String>,
    metamask_v4_compat: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumSignTypedData {
    fn default() -> &'a EthereumSignTypedData {
        <EthereumSignTypedData as ::protobuf::Message>::default_instance()
    }
}

impl EthereumSignTypedData {
    pub fn new() -> EthereumSignTypedData {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // required string primary_type = 2;


    pub fn get_primary_type(&self) -> &str {
        match self.primary_type.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_primary_type(&mut self) {
        self.primary_type.clear();
    }

    pub fn has_primary_type(&self) -> bool {
        self.primary_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_primary_type(&mut self, v: ::std::string::String) {
        self.primary_type = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_primary_type(&mut self) -> &mut ::std::string::String {
        if self.primary_type.is_none() {
            self.primary_type.set_default();
        }
        self.primary_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_primary_type(&mut self) -> ::std::string::String {
        self.primary_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool metamask_v4_compat = 3;


    pub fn get_metamask_v4_compat(&self) -> bool {
        self.metamask_v4_compat.unwrap_or(true)
    }
    pub fn clear_metamask_v4_compat(&mut self) {
        self.metamask_v4_compat = ::std::option::Option::None;
    }

    pub fn has_metamask_v4_compat(&self) -> bool {
        self.metamask_v4_compat.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metamask_v4_compat(&mut self, v: bool) {
        self.metamask_v4_compat = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for EthereumSignTypedData {
    fn is_initialized(&self) -> bool {
        if self.primary_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.primary_type)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.metamask_v4_compat = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.primary_type.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.metamask_v4_compat {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.primary_type.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.metamask_v4_compat {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumSignTypedData {
        EthereumSignTypedData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &EthereumSignTypedData| { &m.address_n },
                |m: &mut EthereumSignTypedData| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "primary_type",
                |m: &EthereumSignTypedData| { &m.primary_type },
                |m: &mut EthereumSignTypedData| { &mut m.primary_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "metamask_v4_compat",
                |m: &EthereumSignTypedData| { &m.metamask_v4_compat },
                |m: &mut EthereumSignTypedData| { &mut m.metamask_v4_compat },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumSignTypedData>(
                "EthereumSignTypedData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumSignTypedData {
        static instance: ::protobuf::rt::LazyV2<EthereumSignTypedData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumSignTypedData::new)
    }
}

impl ::protobuf::Clear for EthereumSignTypedData {
    fn clear(&mut self) {
        self.address_n.clear();
        self.primary_type.clear();
        self.metamask_v4_compat = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumSignTypedData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumSignTypedData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumTypedDataStructRequest {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumTypedDataStructRequest {
    fn default() -> &'a EthereumTypedDataStructRequest {
        <EthereumTypedDataStructRequest as ::protobuf::Message>::default_instance()
    }
}

impl EthereumTypedDataStructRequest {
    pub fn new() -> EthereumTypedDataStructRequest {
        ::std::default::Default::default()
    }

    // required string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for EthereumTypedDataStructRequest {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumTypedDataStructRequest {
        EthereumTypedDataStructRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &EthereumTypedDataStructRequest| { &m.name },
                |m: &mut EthereumTypedDataStructRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumTypedDataStructRequest>(
                "EthereumTypedDataStructRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumTypedDataStructRequest {
        static instance: ::protobuf::rt::LazyV2<EthereumTypedDataStructRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumTypedDataStructRequest::new)
    }
}

impl ::protobuf::Clear for EthereumTypedDataStructRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumTypedDataStructRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumTypedDataStructRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumTypedDataStructAck {
    // message fields
    pub members: ::protobuf::RepeatedField<EthereumTypedDataStructAck_EthereumStructMember>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumTypedDataStructAck {
    fn default() -> &'a EthereumTypedDataStructAck {
        <EthereumTypedDataStructAck as ::protobuf::Message>::default_instance()
    }
}

impl EthereumTypedDataStructAck {
    pub fn new() -> EthereumTypedDataStructAck {
        ::std::default::Default::default()
    }

    // repeated .hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumStructMember members = 1;


    pub fn get_members(&self) -> &[EthereumTypedDataStructAck_EthereumStructMember] {
        &self.members
    }
    pub fn clear_members(&mut self) {
        self.members.clear();
    }

    // Param is passed by value, moved
    pub fn set_members(&mut self, v: ::protobuf::RepeatedField<EthereumTypedDataStructAck_EthereumStructMember>) {
        self.members = v;
    }

    // Mutable pointer to the field.
    pub fn mut_members(&mut self) -> &mut ::protobuf::RepeatedField<EthereumTypedDataStructAck_EthereumStructMember> {
        &mut self.members
    }

    // Take field
    pub fn take_members(&mut self) -> ::protobuf::RepeatedField<EthereumTypedDataStructAck_EthereumStructMember> {
        ::std::mem::replace(&mut self.members, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EthereumTypedDataStructAck {
    fn is_initialized(&self) -> bool {
        for v in &self.members {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.members)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.members {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumTypedDataStructAck {
        EthereumTypedDataStructAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EthereumTypedDataStructAck_EthereumStructMember>>(
                "members",
                |m: &EthereumTypedDataStructAck| { &m.members },
                |m: &mut EthereumTypedDataStructAck| { &mut m.members },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumTypedDataStructAck>(
                "EthereumTypedDataStructAck",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumTypedDataStructAck {
        static instance: ::protobuf::rt::LazyV2<EthereumTypedDataStructAck> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumTypedDataStructAck::new)
    }
}

impl ::protobuf::Clear for EthereumTypedDataStructAck {
    fn clear(&mut self) {
        self.members.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumTypedDataStructAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumTypedDataStructAck {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumTypedDataStructAck_EthereumStructMember {
    // message fields
    pub field_type: ::protobuf::SingularPtrField<EthereumTypedDataStructAck_EthereumFieldType>,
    name: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumTypedDataStructAck_EthereumStructMember {
    fn default() -> &'a EthereumTypedDataStructAck_EthereumStructMember {
        <EthereumTypedDataStructAck_EthereumStructMember as ::protobuf::Message>::default_instance()
    }
}

impl EthereumTypedDataStructAck_EthereumStructMember {
    pub fn new() -> EthereumTypedDataStructAck_EthereumStructMember {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumFieldType type = 1;


    pub fn get_field_type(&self) -> &EthereumTypedDataStructAck_EthereumFieldType {
        self.field_type.as_ref().unwrap_or_else(|| <EthereumTypedDataStructAck_EthereumFieldType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: EthereumTypedDataStructAck_EthereumFieldType) {
        self.field_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut EthereumTypedDataStructAck_EthereumFieldType {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> EthereumTypedDataStructAck_EthereumFieldType {
        self.field_type.take().unwrap_or_else(|| EthereumTypedDataStructAck_EthereumFieldType::new())
    }

    // required string name = 2;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for EthereumTypedDataStructAck_EthereumStructMember {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        if self.name.is_none() {
            return false;
        }
        for v in &self.field_type {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumTypedDataStructAck_EthereumStructMember {
        EthereumTypedDataStructAck_EthereumStructMember::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EthereumTypedDataStructAck_EthereumFieldType>>(
                "type",
                |m: &EthereumTypedDataStructAck_EthereumStructMember| { &m.field_type },
                |m: &mut EthereumTypedDataStructAck_EthereumStructMember| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &EthereumTypedDataStructAck_EthereumStructMember| { &m.name },
                |m: &mut EthereumTypedDataStructAck_EthereumStructMember| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumTypedDataStructAck_EthereumStructMember>(
                "EthereumTypedDataStructAck.EthereumStructMember",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumTypedDataStructAck_EthereumStructMember {
        static instance: ::protobuf::rt::LazyV2<EthereumTypedDataStructAck_EthereumStructMember> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumTypedDataStructAck_EthereumStructMember::new)
    }
}

impl ::protobuf::Clear for EthereumTypedDataStructAck_EthereumStructMember {
    fn clear(&mut self) {
        self.field_type.clear();
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumTypedDataStructAck_EthereumStructMember {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumTypedDataStructAck_EthereumStructMember {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumTypedDataStructAck_EthereumFieldType {
    // message fields
    data_type: ::std::option::Option<EthereumTypedDataStructAck_EthereumDataType>,
    size: ::std::option::Option<u32>,
    pub entry_type: ::protobuf::SingularPtrField<EthereumTypedDataStructAck_EthereumFieldType>,
    struct_name: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumTypedDataStructAck_EthereumFieldType {
    fn default() -> &'a EthereumTypedDataStructAck_EthereumFieldType {
        <EthereumTypedDataStructAck_EthereumFieldType as ::protobuf::Message>::default_instance()
    }
}

impl EthereumTypedDataStructAck_EthereumFieldType {
    pub fn new() -> EthereumTypedDataStructAck_EthereumFieldType {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumDataType data_type = 1;


    pub fn get_data_type(&self) -> EthereumTypedDataStructAck_EthereumDataType {
        self.data_type.unwrap_or(EthereumTypedDataStructAck_EthereumDataType::UINT)
    }
    pub fn clear_data_type(&mut self) {
        self.data_type = ::std::option::Option::None;
    }

    pub fn has_data_type(&self) -> bool {
        self.data_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_type(&mut self, v: EthereumTypedDataStructAck_EthereumDataType) {
        self.data_type = ::std::option::Option::Some(v);
    }

    // optional uint32 size = 2;


    pub fn get_size(&self) -> u32 {
        self.size.unwrap_or(0)
    }
    pub fn clear_size(&mut self) {
        self.size = ::std::option::Option::None;
    }

    pub fn has_size(&self) -> bool {
        self.size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: u32) {
        self.size = ::std::option::Option::Some(v);
    }

    // optional .hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.EthereumFieldType entry_type = 3;


    pub fn get_entry_type(&self) -> &EthereumTypedDataStructAck_EthereumFieldType {
        self.entry_type.as_ref().unwrap_or_else(|| <EthereumTypedDataStructAck_EthereumFieldType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_entry_type(&mut self) {
        self.entry_type.clear();
    }

    pub fn has_entry_type(&self) -> bool {
        self.entry_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_entry_type(&mut self, v: EthereumTypedDataStructAck_EthereumFieldType) {
        self.entry_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entry_type(&mut self) -> &mut EthereumTypedDataStructAck_EthereumFieldType {
        if self.entry_type.is_none() {
            self.entry_type.set_default();
        }
        self.entry_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_entry_type(&mut self) -> EthereumTypedDataStructAck_EthereumFieldType {
        self.entry_type.take().unwrap_or_else(|| EthereumTypedDataStructAck_EthereumFieldType::new())
    }

    // optional string struct_name = 4;


    pub fn get_struct_name(&self) -> &str {
        match self.struct_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_struct_name(&mut self) {
        self.struct_name.clear();
    }

    pub fn has_struct_name(&self) -> bool {
        self.struct_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_struct_name(&mut self, v: ::std::string::String) {
        self.struct_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_struct_name(&mut self) -> &mut ::std::string::String {
        if self.struct_name.is_none() {
            self.struct_name.set_default();
        }
        self.struct_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_struct_name(&mut self) -> ::std::string::String {
        self.struct_name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for EthereumTypedDataStructAck_EthereumFieldType {
    fn is_initialized(&self) -> bool {
        if self.data_type.is_none() {
            return false;
        }
        for v in &self.entry_type {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.data_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.size = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.entry_type)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.struct_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.data_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(v) = self.size {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.entry_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.struct_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.data_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.size {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.entry_type.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.struct_name.as_ref() {
            os.write_string(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumTypedDataStructAck_EthereumFieldType {
        EthereumTypedDataStructAck_EthereumFieldType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EthereumTypedDataStructAck_EthereumDataType>>(
                "data_type",
                |m: &EthereumTypedDataStructAck_EthereumFieldType| { &m.data_type },
                |m: &mut EthereumTypedDataStructAck_EthereumFieldType| { &mut m.data_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "size",
                |m: &EthereumTypedDataStructAck_EthereumFieldType| { &m.size },
                |m: &mut EthereumTypedDataStructAck_EthereumFieldType| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EthereumTypedDataStructAck_EthereumFieldType>>(
                "entry_type",
                |m: &EthereumTypedDataStructAck_EthereumFieldType| { &m.entry_type },
                |m: &mut EthereumTypedDataStructAck_EthereumFieldType| { &mut m.entry_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "struct_name",
                |m: &EthereumTypedDataStructAck_EthereumFieldType| { &m.struct_name },
                |m: &mut EthereumTypedDataStructAck_EthereumFieldType| { &mut m.struct_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumTypedDataStructAck_EthereumFieldType>(
                "EthereumTypedDataStructAck.EthereumFieldType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumTypedDataStructAck_EthereumFieldType {
        static instance: ::protobuf::rt::LazyV2<EthereumTypedDataStructAck_EthereumFieldType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumTypedDataStructAck_EthereumFieldType::new)
    }
}

impl ::protobuf::Clear for EthereumTypedDataStructAck_EthereumFieldType {
    fn clear(&mut self) {
        self.data_type = ::std::option::Option::None;
        self.size = ::std::option::Option::None;
        self.entry_type.clear();
        self.struct_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumTypedDataStructAck_EthereumFieldType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumTypedDataStructAck_EthereumFieldType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EthereumTypedDataStructAck_EthereumDataType {
    UINT = 1,
    INT = 2,
    BYTES = 3,
    STRING = 4,
    BOOL = 5,
    ADDRESS = 6,
    ARRAY = 7,
    STRUCT = 8,
}

impl ::protobuf::ProtobufEnum for EthereumTypedDataStructAck_EthereumDataType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EthereumTypedDataStructAck_EthereumDataType> {
        match value {
            1 => ::std::option::Option::Some(EthereumTypedDataStructAck_EthereumDataType::UINT),
            2 => ::std::option::Option::Some(EthereumTypedDataStructAck_EthereumDataType::INT),
            3 => ::std::option::Option::Some(EthereumTypedDataStructAck_EthereumDataType::BYTES),
            4 => ::std::option::Option::Some(EthereumTypedDataStructAck_EthereumDataType::STRING),
            5 => ::std::option::Option::Some(EthereumTypedDataStructAck_EthereumDataType::BOOL),
            6 => ::std::option::Option::Some(EthereumTypedDataStructAck_EthereumDataType::ADDRESS),
            7 => ::std::option::Option::Some(EthereumTypedDataStructAck_EthereumDataType::ARRAY),
            8 => ::std::option::Option::Some(EthereumTypedDataStructAck_EthereumDataType::STRUCT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EthereumTypedDataStructAck_EthereumDataType] = &[
            EthereumTypedDataStructAck_EthereumDataType::UINT,
            EthereumTypedDataStructAck_EthereumDataType::INT,
            EthereumTypedDataStructAck_EthereumDataType::BYTES,
            EthereumTypedDataStructAck_EthereumDataType::STRING,
            EthereumTypedDataStructAck_EthereumDataType::BOOL,
            EthereumTypedDataStructAck_EthereumDataType::ADDRESS,
            EthereumTypedDataStructAck_EthereumDataType::ARRAY,
            EthereumTypedDataStructAck_EthereumDataType::STRUCT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EthereumTypedDataStructAck_EthereumDataType>("EthereumTypedDataStructAck.EthereumDataType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EthereumTypedDataStructAck_EthereumDataType {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EthereumTypedDataStructAck_EthereumDataType {
    fn default() -> Self {
        EthereumTypedDataStructAck_EthereumDataType::UINT
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumTypedDataStructAck_EthereumDataType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumTypedDataValueRequest {
    // message fields
    pub member_path: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumTypedDataValueRequest {
    fn default() -> &'a EthereumTypedDataValueRequest {
        <EthereumTypedDataValueRequest as ::protobuf::Message>::default_instance()
    }
}

impl EthereumTypedDataValueRequest {
    pub fn new() -> EthereumTypedDataValueRequest {
        ::std::default::Default::default()
    }

    // repeated uint32 member_path = 1;


    pub fn get_member_path(&self) -> &[u32] {
        &self.member_path
    }
    pub fn clear_member_path(&mut self) {
        self.member_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_member_path(&mut self, v: ::std::vec::Vec<u32>) {
        self.member_path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_member_path(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.member_path
    }

    // Take field
    pub fn take_member_path(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.member_path, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EthereumTypedDataValueRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.member_path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.member_path {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.member_path {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumTypedDataValueRequest {
        EthereumTypedDataValueRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "member_path",
                |m: &EthereumTypedDataValueRequest| { &m.member_path },
                |m: &mut EthereumTypedDataValueRequest| { &mut m.member_path },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumTypedDataValueRequest>(
                "EthereumTypedDataValueRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumTypedDataValueRequest {
        static instance: ::protobuf::rt::LazyV2<EthereumTypedDataValueRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumTypedDataValueRequest::new)
    }
}

impl ::protobuf::Clear for EthereumTypedDataValueRequest {
    fn clear(&mut self) {
        self.member_path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumTypedDataValueRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumTypedDataValueRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumTypedDataValueAck {
    // message fields
    value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumTypedDataValueAck {
    fn default() -> &'a EthereumTypedDataValueAck {
        <EthereumTypedDataValueAck as ::protobuf::Message>::default_instance()
    }
}

impl EthereumTypedDataValueAck {
    pub fn new() -> EthereumTypedDataValueAck {
        ::std::default::Default::default()
    }

    // required bytes value = 1;


    pub fn get_value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EthereumTypedDataValueAck {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.value.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumTypedDataValueAck {
        EthereumTypedDataValueAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &EthereumTypedDataValueAck| { &m.value },
                |m: &mut EthereumTypedDataValueAck| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumTypedDataValueAck>(
                "EthereumTypedDataValueAck",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumTypedDataValueAck {
        static instance: ::protobuf::rt::LazyV2<EthereumTypedDataValueAck> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumTypedDataValueAck::new)
    }
}

impl ::protobuf::Clear for EthereumTypedDataValueAck {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumTypedDataValueAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumTypedDataValueAck {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumTypedDataSignature {
    // message fields
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumTypedDataSignature {
    fn default() -> &'a EthereumTypedDataSignature {
        <EthereumTypedDataSignature as ::protobuf::Message>::default_instance()
    }
}

impl EthereumTypedDataSignature {
    pub fn new() -> EthereumTypedDataSignature {
        ::std::default::Default::default()
    }

    // required bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required string address = 2;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for EthereumTypedDataSignature {
    fn is_initialized(&self) -> bool {
        if self.signature.is_none() {
            return false;
        }
        if self.address.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumTypedDataSignature {
        EthereumTypedDataSignature::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &EthereumTypedDataSignature| { &m.signature },
                |m: &mut EthereumTypedDataSignature| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &EthereumTypedDataSignature| { &m.address },
                |m: &mut EthereumTypedDataSignature| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EthereumTypedDataSignature>(
                "EthereumTypedDataSignature",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EthereumTypedDataSignature {
        static instance: ::protobuf::rt::LazyV2<EthereumTypedDataSignature> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EthereumTypedDataSignature::new)
    }
}

impl ::protobuf::Clear for EthereumTypedDataSignature {
    fn clear(&mut self) {
        self.signature.clear();
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumTypedDataSignature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumTypedDataSignature {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1emessages-ethereum-eip712.proto\x12\"hw.trezor.messages.ethereum_ei\
    p712\"\x8b\x01\n\x15EthereumSignTypedData\x12\x1b\n\taddress_n\x18\x01\
    \x20\x03(\rR\x08addressN\x12!\n\x0cprimary_type\x18\x02\x20\x02(\tR\x0bp\
    rimaryType\x122\n\x12metamask_v4_compat\x18\x03\x20\x01(\x08:\x04trueR\
    \x10metamaskV4Compat\"4\n\x1eEthereumTypedDataStructRequest\x12\x12\n\
    \x04name\x18\x01\x20\x02(\tR\x04name\"\xb4\x05\n\x1aEthereumTypedDataStr\
    uctAck\x12m\n\x07members\x18\x01\x20\x03(\x0b2S.hw.trezor.messages.ether\
    eum_eip712.EthereumTypedDataStructAck.EthereumStructMemberR\x07members\
    \x1a\x90\x01\n\x14EthereumStructMember\x12d\n\x04type\x18\x01\x20\x02(\
    \x0b2P.hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.Eth\
    ereumFieldTypeR\x04type\x12\x12\n\x04name\x18\x02\x20\x02(\tR\x04name\
    \x1a\xa7\x02\n\x11EthereumFieldType\x12l\n\tdata_type\x18\x01\x20\x02(\
    \x0e2O.hw.trezor.messages.ethereum_eip712.EthereumTypedDataStructAck.Eth\
    ereumDataTypeR\x08dataType\x12\x12\n\x04size\x18\x02\x20\x01(\rR\x04size\
    \x12o\n\nentry_type\x18\x03\x20\x01(\x0b2P.hw.trezor.messages.ethereum_e\
    ip712.EthereumTypedDataStructAck.EthereumFieldTypeR\tentryType\x12\x1f\n\
    \x0bstruct_name\x18\x04\x20\x01(\tR\nstructName\"j\n\x10EthereumDataType\
    \x12\x08\n\x04UINT\x10\x01\x12\x07\n\x03INT\x10\x02\x12\t\n\x05BYTES\x10\
    \x03\x12\n\n\x06STRING\x10\x04\x12\x08\n\x04BOOL\x10\x05\x12\x0b\n\x07AD\
    DRESS\x10\x06\x12\t\n\x05ARRAY\x10\x07\x12\n\n\x06STRUCT\x10\x08\"@\n\
    \x1dEthereumTypedDataValueRequest\x12\x1f\n\x0bmember_path\x18\x01\x20\
    \x03(\rR\nmemberPath\"1\n\x19EthereumTypedDataValueAck\x12\x14\n\x05valu\
    e\x18\x01\x20\x02(\x0cR\x05value\"T\n\x1aEthereumTypedDataSignature\x12\
    \x1c\n\tsignature\x18\x01\x20\x02(\x0cR\tsignature\x12\x18\n\x07address\
    \x18\x02\x20\x02(\tR\x07addressBB\n#com.satoshilabs.trezor.lib.protobufB\
    \x1bTrezorMessageEthereumEIP712J\x9b\x1b\n\x06\x12\x04\0\0a\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0+\n\x08\n\x01\x08\
    \x12\x03\x04\0<\n.\n\x02\x08\x01\x12\x03\x04\0<\x1a#\x20Sugar\x20for\x20\
    easier\x20handling\x20in\x20Java\n\n\x08\n\x01\x08\x12\x03\x05\0<\n\t\n\
    \x02\x08\x08\x12\x03\x05\0<\n\xf2\x02\n\x02\x04\0\x12\x04\x15\0\x19\x01\
    \x1a\xae\x01*\n\x20Request:\x20Ask\x20device\x20to\x20sign\x20typed\x20d\
    ata\n\x20@start\n\x20@next\x20EthereumTypedDataStructRequest\n\x20@next\
    \x20EthereumTypedDataValueRequest\n\x20@next\x20EthereumTypedDataSignatu\
    re\n\x20@next\x20Failure\n2\xb4\x01\x20Separated\x20from\x20messages-eth\
    ereum.proto\x20as\x20it\x20is\x20not\x20implemented\x20on\x20T1\x20side\
    \n\x20and\x20defining\x20all\x20the\x20messages\x20and\x20fields\x20coul\
    d\x20be\x20even\x20impossible\x20as\x20recursive\n\x20messages\x20are\
    \x20used\x20here\n\n\n\n\x03\x04\0\x01\x12\x03\x15\x08\x1d\n=\n\x04\x04\
    \0\x02\0\x12\x03\x16\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\
    \x20key\x20from\x20master\x20node\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\
    \x16\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x16\r\x13\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x16\x14\x1d\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x16\x20!\n.\n\x04\x04\0\x02\x01\x12\x03\x17\x04%\"!\x20name\x20of\x20th\
    e\x20root\x20message\x20struct\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\
    \x17\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x17\r\x13\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x17\x14\x20\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x17#$\nX\n\x04\x04\0\x02\x02\x12\x03\x18\x048\"K\x20use\x20MetaMask\
    \x20v4\x20(see\x20https://github.com/MetaMask/eth-sig-util/issues/106)\n\
    \n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x18\x04\x0c\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03\x18\r\x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x18\x12\
    $\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x18'(\n\x0c\n\x05\x04\0\x02\x02\
    \x08\x12\x03\x18)7\n\x0c\n\x05\x04\0\x02\x02\x07\x12\x03\x1826\nl\n\x02\
    \x04\x01\x12\x04\x1f\0!\x01\x1a`*\n\x20Response:\x20Device\x20asks\x20fo\
    r\x20type\x20information\x20about\x20a\x20struct.\n\x20@next\x20Ethereum\
    TypedDataStructAck\n\n\n\n\x03\x04\x01\x01\x12\x03\x1f\x08&\n+\n\x04\x04\
    \x01\x02\0\x12\x03\x20\x04\x1d\"\x1e\x20name\x20of\x20the\x20requested\
    \x20struct\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x20\x04\x0c\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\x20\r\x13\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x20\x14\x18\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x20\x1b\x1c\n\
    _\n\x02\x04\x02\x12\x04'\0D\x01\x1aS*\n\x20Request:\x20Type\x20informati\
    on\x20about\x20a\x20struct.\n\x20@next\x20EthereumTypedDataStructRequest\
    \n\n\n\n\x03\x04\x02\x01\x12\x03'\x08\"\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03(\x04.\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03(\x04\x0c\n\x0c\n\x05\
    \x04\x02\x02\0\x06\x12\x03(\r!\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03(\")\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03(,-\n\x0c\n\x04\x04\x02\x03\0\x12\
    \x04*\x04-\x05\n\x0c\n\x05\x04\x02\x03\0\x01\x12\x03*\x0c\x20\n\r\n\x06\
    \x04\x02\x03\0\x02\0\x12\x03+\x08,\n\x0e\n\x07\x04\x02\x03\0\x02\0\x04\
    \x12\x03+\x08\x10\n\x0e\n\x07\x04\x02\x03\0\x02\0\x06\x12\x03+\x11\"\n\
    \x0e\n\x07\x04\x02\x03\0\x02\0\x01\x12\x03+#'\n\x0e\n\x07\x04\x02\x03\0\
    \x02\0\x03\x12\x03+*+\n\r\n\x06\x04\x02\x03\0\x02\x01\x12\x03,\x08!\n\
    \x0e\n\x07\x04\x02\x03\0\x02\x01\x04\x12\x03,\x08\x10\n\x0e\n\x07\x04\
    \x02\x03\0\x02\x01\x05\x12\x03,\x11\x17\n\x0e\n\x07\x04\x02\x03\0\x02\
    \x01\x01\x12\x03,\x18\x1c\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x03\x12\x03,\
    \x1f\x20\n\x0c\n\x04\x04\x02\x03\x01\x12\x04/\x048\x05\n\x0c\n\x05\x04\
    \x02\x03\x01\x01\x12\x03/\x0c\x1d\n\r\n\x06\x04\x02\x03\x01\x02\0\x12\
    \x030\x080\n\x0e\n\x07\x04\x02\x03\x01\x02\0\x04\x12\x030\x08\x10\n\x0e\
    \n\x07\x04\x02\x03\x01\x02\0\x06\x12\x030\x11!\n\x0e\n\x07\x04\x02\x03\
    \x01\x02\0\x01\x12\x030\"+\n\x0e\n\x07\x04\x02\x03\x01\x02\0\x03\x12\x03\
    0./\nY\n\x06\x04\x02\x03\x01\x02\x01\x12\x031\x08!\"J\x20for\x20integer\
    \x20types:\x20size\x20in\x20bytes\x20(uint8\x20has\x20size\x201,\x20uint\
    256\x20has\x20size\x2032)\n\n\x0e\n\x07\x04\x02\x03\x01\x02\x01\x04\x12\
    \x031\x08\x10\n\x0e\n\x07\x04\x02\x03\x01\x02\x01\x05\x12\x031\x11\x17\n\
    \x0e\n\x07\x04\x02\x03\x01\x02\x01\x01\x12\x031\x18\x1c\n\x0e\n\x07\x04\
    \x02\x03\x01\x02\x01\x03\x12\x031\x1f\x20\n\xe8\x01\n\x06\x04\x02\x03\
    \x01\x02\x02\x12\x036\x082\x1a\xaf\x01\x20for\x20bytes\x20types:\x20size\
    \x20in\x20bytes,\x20or\x20unset\x20for\x20dynamic\n\x20for\x20arrays:\
    \x20size\x20in\x20elements,\x20or\x20unset\x20for\x20dynamic\n\x20for\
    \x20structs:\x20number\x20of\x20members\n\x20for\x20string,\x20bool\x20a\
    nd\x20address:\x20unset\n\"'\x20for\x20array\x20types,\x20type\x20of\x20\
    single\x20entry\n\n\x0e\n\x07\x04\x02\x03\x01\x02\x02\x04\x12\x036\x08\
    \x10\n\x0e\n\x07\x04\x02\x03\x01\x02\x02\x06\x12\x036\x11\"\n\x0e\n\x07\
    \x04\x02\x03\x01\x02\x02\x01\x12\x036#-\n\x0e\n\x07\x04\x02\x03\x01\x02\
    \x02\x03\x12\x03601\n&\n\x06\x04\x02\x03\x01\x02\x03\x12\x037\x08(\"\x17\
    \x20for\x20structs:\x20its\x20name\n\n\x0e\n\x07\x04\x02\x03\x01\x02\x03\
    \x04\x12\x037\x08\x10\n\x0e\n\x07\x04\x02\x03\x01\x02\x03\x05\x12\x037\
    \x11\x17\n\x0e\n\x07\x04\x02\x03\x01\x02\x03\x01\x12\x037\x18#\n\x0e\n\
    \x07\x04\x02\x03\x01\x02\x03\x03\x12\x037&'\n\x0c\n\x04\x04\x02\x04\0\
    \x12\x04:\x04C\x05\n\x0c\n\x05\x04\x02\x04\0\x01\x12\x03:\t\x19\n\r\n\
    \x06\x04\x02\x04\0\x02\0\x12\x03;\x08\x11\n\x0e\n\x07\x04\x02\x04\0\x02\
    \0\x01\x12\x03;\x08\x0c\n\x0e\n\x07\x04\x02\x04\0\x02\0\x02\x12\x03;\x0f\
    \x10\n\r\n\x06\x04\x02\x04\0\x02\x01\x12\x03<\x08\x10\n\x0e\n\x07\x04\
    \x02\x04\0\x02\x01\x01\x12\x03<\x08\x0b\n\x0e\n\x07\x04\x02\x04\0\x02\
    \x01\x02\x12\x03<\x0e\x0f\n\r\n\x06\x04\x02\x04\0\x02\x02\x12\x03=\x08\
    \x12\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x01\x12\x03=\x08\r\n\x0e\n\x07\
    \x04\x02\x04\0\x02\x02\x02\x12\x03=\x10\x11\n\r\n\x06\x04\x02\x04\0\x02\
    \x03\x12\x03>\x08\x13\n\x0e\n\x07\x04\x02\x04\0\x02\x03\x01\x12\x03>\x08\
    \x0e\n\x0e\n\x07\x04\x02\x04\0\x02\x03\x02\x12\x03>\x11\x12\n\r\n\x06\
    \x04\x02\x04\0\x02\x04\x12\x03?\x08\x11\n\x0e\n\x07\x04\x02\x04\0\x02\
    \x04\x01\x12\x03?\x08\x0c\n\x0e\n\x07\x04\x02\x04\0\x02\x04\x02\x12\x03?\
    \x0f\x10\n\r\n\x06\x04\x02\x04\0\x02\x05\x12\x03@\x08\x14\n\x0e\n\x07\
    \x04\x02\x04\0\x02\x05\x01\x12\x03@\x08\x0f\n\x0e\n\x07\x04\x02\x04\0\
    \x02\x05\x02\x12\x03@\x12\x13\n\r\n\x06\x04\x02\x04\0\x02\x06\x12\x03A\
    \x08\x12\n\x0e\n\x07\x04\x02\x04\0\x02\x06\x01\x12\x03A\x08\r\n\x0e\n\
    \x07\x04\x02\x04\0\x02\x06\x02\x12\x03A\x10\x11\n\r\n\x06\x04\x02\x04\0\
    \x02\x07\x12\x03B\x08\x13\n\x0e\n\x07\x04\x02\x04\0\x02\x07\x01\x12\x03B\
    \x08\x0e\n\x0e\n\x07\x04\x02\x04\0\x02\x07\x02\x12\x03B\x11\x12\nl\n\x02\
    \x04\x03\x12\x04J\0L\x01\x1a`*\n\x20Response:\x20Device\x20asks\x20for\
    \x20data\x20at\x20the\x20specific\x20member\x20path.\n\x20@next\x20Ether\
    eumTypedDataValueAck\n\n\n\n\x03\x04\x03\x01\x12\x03J\x08%\n.\n\x04\x04\
    \x03\x02\0\x12\x03K\x04$\"!\x20member\x20path\x20requested\x20by\x20devi\
    ce\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03K\x04\x0c\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03K\r\x13\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03K\x14\x1f\
    \n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03K\"#\nf\n\x02\x04\x04\x12\x04R\0X\
    \x01\x1aZ*\n\x20Request:\x20Single\x20value\x20of\x20a\x20specific\x20at\
    omic\x20field.\n\x20@next\x20EthereumTypedDataValueRequest\n\n\n\n\x03\
    \x04\x04\x01\x12\x03R\x08!\n\x8a\x02\n\x04\x04\x04\x02\0\x12\x03S\x04\
    \x1d\"\xfc\x01\x20*\x20atomic\x20types:\x20value\x20of\x20the\x20member.\
    \n\x20\x20\x20Length\x20must\x20match\x20the\x20`size`\x20of\x20the\x20c\
    orresponding\x20field\x20type,\x20unless\x20the\x20size\x20is\x20dynamic\
    .\n\x20*\x20array\x20types:\x20number\x20of\x20elements,\x20encoded\x20a\
    s\x20uint16.\n\x20*\x20struct\x20types:\x20undefined,\x20Trezor\x20will\
    \x20not\x20query\x20a\x20struct\x20field.\n\n\x0c\n\x05\x04\x04\x02\0\
    \x04\x12\x03S\x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03S\r\x12\n\x0c\
    \n\x05\x04\x04\x02\0\x01\x12\x03S\x13\x18\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03S\x1b\x1c\n1\n\x02\x04\x05\x12\x04^\0a\x01\x1a%*\n\x20Response:\
    \x20Signed\x20typed\x20data\n\x20@end\n\n\n\n\x03\x04\x05\x01\x12\x03^\
    \x08\"\n*\n\x04\x04\x05\x02\0\x12\x03_\x04!\"\x1d\x20signature\x20of\x20\
    the\x20typed\x20data\n\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03_\x04\x0c\n\
    \x0c\n\x05\x04\x05\x02\0\x05\x12\x03_\r\x12\n\x0c\n\x05\x04\x05\x02\0\
    \x01\x12\x03_\x13\x1c\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03_\x1f\x20\n2\
    \n\x04\x04\x05\x02\x01\x12\x03`\x04\x20\"%\x20address\x20used\x20to\x20s\
    ign\x20the\x20typed\x20data\n\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03`\
    \x04\x0c\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03`\r\x13\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x03`\x14\x1b\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x03`\x1e\x1f\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
